#!/usr/bin/env puma

{{#has_puma_hooks}}
require "{{live_dir}}{{puma_hooks}}"
{{/has_puma_hooks}}

# The directory to operate out of.
#
# The default is the current directory.
#
directory '{{live_dir}}'

# Use an object or block as the rack application. This allows the
# config file to be the application itself.
#
# app do |env|
#   puts env
#
#   body = 'Hello, World!'
#
#   [200, { 'Content-Type' => 'text/plain', 'Content-Length' => body.length.to_s }, [body]]
# end

# Load "path" as a rackup file.
#
# The default is "config.ru".
#
rackup '{{live_dir}}/config.ru'

# Set the environment in which the rack's app will run. The value must be a string.
#
# The default is "development".
#
environment '{{environment}}'

# Daemonize the server into the background. Highly suggest that
# this be combined with "pidfile" and "stdout_redirect".
#
# The default is "false".
#
# daemonize
daemonize false

# Store the pid of the server in the file at "path".
#
pidfile '{{deploy_dir}}/var/run/puma.pid'

# Use "path" as the file to store the server info state. This is
# used by "pumactl" to query and control the server.
#
state_path '{{deploy_dir}}/var/run/puma.state'

# Redirect STDOUT and STDERR to files specified. The 3rd parameter
# ("append") specifies whether the output is appended, the default is
# "false".
#
stdout_redirect '{{deploy_dir}}/var/log/puma/puma.stdout.log', '{{deploy_dir}}/var/log/puma/puma.stderr.log', true

# Disable request logging.
#
# The default is "false".
#
{{#quiet}}quiet{{/quiet}}

# Configure "min" to be the minimum number of threads to use to answer
# requests and "max" the maximum.
#
# The default is "0, 16".
#
threads {{thread_min}}, {{thread_max}}

# Bind the server to "url". "tcp://", "unix://" and "ssl://" are the only
# accepted protocols.
#
# The default is "tcp://0.0.0.0:9292".
#
bind 'tcp://0.0.0.0:8080'

# Instead of "bind 'ssl://127.0.0.1:9292?key=path_to_key&cert=path_to_cert'" you
# can also use the "ssl_bind" option.
#
# ssl_bind '127.0.0.1', '9292', { key: path_to_key, cert: path_to_cert }

# Command to use to restart puma. This should be just how to
# load puma itself (ie. 'ruby -Ilib bin/puma'), not the arguments
# to puma, as those are the same as the original process.
#
{{#has_restart_command}}restart_command {{restart_command}}{{/has_restart_command}}

# === Cluster mode ===

# How many worker processes to run.
#
# The default is "0".
#
{{#has_workers}}workers {{workers}} {{/has_workers}}

# Allow workers to reload bundler context when master process is issued
# a USR1 signal. This allows proper reloading of gems while the master
# is preserved across a phased-restart. (incompatible with preload_app)
# (off by default)

{{#prune_bundler}}prune_bundler{{/prune_bundler}}

# Preload the application before starting the workers; this conflicts with
# phased restart feature. (off by default)

{{#preload_app}}preload_app!{{/preload_app}}

# Additional text to display in process listing
#
tag '{{app_name}}'

# Change the default timeout of workers
#
worker_timeout {{worker_timeout}}

# === Puma control rack application ===

# Start the puma control rack application on "url". This application can
# be communicated with to control the main server. Additionally, you can
# provide an authentication token, so all requests to the control server
# will need to include that token as a query parameter. This allows for
# simple authentication.
#
# Check out https://github.com/puma/puma/blob/master/lib/puma/app/status.rb
# to see what the app has available.
#
# activate_control_app 'unix:///var/run/pumactl.sock'
# activate_control_app 'unix:///var/run/pumactl.sock', { auth_token: '12345' }
# activate_control_app 'unix:///var/run/pumactl.sock', { no_token: true }